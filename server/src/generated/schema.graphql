"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """A list of `Category` objects."""
  nodes: [Category!]!

  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category!
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  name: String!
  id: Int!

  """Reads and enables pagination through a set of `Tracker`."""
  trackers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tracker`."""
    orderBy: [TrackersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TrackerFilter
  ): TrackersConnection!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
A filter to be used against `Category` object types. All fields are combined with a logical ‘and.’
"""
input CategoryFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Checks for all expressions in this list."""
  and: [CategoryFilter!]

  """Checks for any expressions in this list."""
  or: [CategoryFilter!]

  """Negates the expression."""
  not: CategoryFilter
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  name: String!
  id: Int
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  name: String
  id: Int
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be created by this mutation."""
  category: CategoryInput!
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was created by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the create `Entry` mutation."""
input CreateEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Entry` to be created by this mutation."""
  entry: EntryInput!
}

"""The output of our create `Entry` mutation."""
type CreateEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Entry` that was created by this mutation."""
  entry: Entry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tracker` that is related to this `Entry`."""
  tracker: Tracker

  """An edge for our `Entry`. May be used by Relay 1."""
  entryEdge(
    """The method to use when ordering `Entry`."""
    orderBy: [EntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EntriesEdge
}

"""All input for the create `Tracker` mutation."""
input CreateTrackerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tracker` to be created by this mutation."""
  tracker: TrackerInput!
}

"""The output of our create `Tracker` mutation."""
type CreateTrackerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tracker` that was created by this mutation."""
  tracker: Tracker

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Tracker`."""
  category: Category

  """Reads a single `Unit` that is related to this `Tracker`."""
  unit: Unit

  """An edge for our `Tracker`. May be used by Relay 1."""
  trackerEdge(
    """The method to use when ordering `Tracker`."""
    orderBy: [TrackersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TrackersEdge
}

"""All input for the create `Unit` mutation."""
input CreateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Unit` to be created by this mutation."""
  unit: UnitInput!
}

"""The output of our create `Unit` mutation."""
type CreateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was created by this mutation."""
  unit: Unit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Unit`."""
  unitByBaseUnit: Unit

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCategoryByNodeId` mutation."""
input DeleteCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was deleted by this mutation."""
  category: Category
  deletedCategoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `deleteEntryByNodeId` mutation."""
input DeleteEntryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Entry` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEntry` mutation."""
input DeleteEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Entry` mutation."""
type DeleteEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Entry` that was deleted by this mutation."""
  entry: Entry
  deletedEntryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tracker` that is related to this `Entry`."""
  tracker: Tracker

  """An edge for our `Entry`. May be used by Relay 1."""
  entryEdge(
    """The method to use when ordering `Entry`."""
    orderBy: [EntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EntriesEdge
}

"""All input for the `deleteTrackerByNodeId` mutation."""
input DeleteTrackerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tracker` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTracker` mutation."""
input DeleteTrackerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Tracker` mutation."""
type DeleteTrackerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tracker` that was deleted by this mutation."""
  tracker: Tracker
  deletedTrackerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Tracker`."""
  category: Category

  """Reads a single `Unit` that is related to this `Tracker`."""
  unit: Unit

  """An edge for our `Tracker`. May be used by Relay 1."""
  trackerEdge(
    """The method to use when ordering `Tracker`."""
    orderBy: [TrackersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TrackersEdge
}

"""All input for the `deleteUnitByNodeId` mutation."""
input DeleteUnitByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUnit` mutation."""
input DeleteUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Unit` mutation."""
type DeleteUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was deleted by this mutation."""
  unit: Unit
  deletedUnitNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Unit`."""
  unitByBaseUnit: Unit

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""A connection to a list of `Entry` values."""
type EntriesConnection {
  """A list of `Entry` objects."""
  nodes: [Entry!]!

  """
  A list of edges which contains the `Entry` and cursor to aid in pagination.
  """
  edges: [EntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Entry` you could get from the connection."""
  totalCount: Int!
}

"""A `Entry` edge in the connection."""
type EntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Entry` at the end of the edge."""
  node: Entry!
}

"""Methods to use when ordering `Entry`."""
enum EntriesOrderBy {
  NATURAL
  TRACKER_ID_ASC
  TRACKER_ID_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Entry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  time: Datetime!
  comment: String
  value: Int
  createdAt: Datetime!
  trackerId: Int!
  id: Int!

  """Reads a single `Tracker` that is related to this `Entry`."""
  tracker: Tracker
}

"""
A condition to be used against `Entry` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EntryCondition {
  """Checks for equality with the object’s `trackerId` field."""
  trackerId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
A filter to be used against `Entry` object types. All fields are combined with a logical ‘and.’
"""
input EntryFilter {
  """Filter by the object’s `trackerId` field."""
  trackerId: IntFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Checks for all expressions in this list."""
  and: [EntryFilter!]

  """Checks for any expressions in this list."""
  or: [EntryFilter!]

  """Negates the expression."""
  not: EntryFilter
}

"""An input for mutations affecting `Entry`"""
input EntryInput {
  time: Datetime
  comment: String
  value: Int
  createdAt: Datetime
  trackerId: Int!
  id: Int
}

"""
Represents an update to a `Entry`. Fields that are set will be updated.
"""
input EntryPatch {
  time: Datetime
  comment: String
  value: Int
  createdAt: Datetime
  trackerId: Int
  id: Int
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `Entry`."""
  createEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEntryInput!
  ): CreateEntryPayload

  """Creates a single `Tracker`."""
  createTracker(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrackerInput!
  ): CreateTrackerPayload

  """Creates a single `Unit`."""
  createUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUnitInput!
  ): CreateUnitPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByNodeIdInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Entry` using its globally unique id and a patch."""
  updateEntryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEntryByNodeIdInput!
  ): UpdateEntryPayload

  """Updates a single `Entry` using a unique key and a patch."""
  updateEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEntryInput!
  ): UpdateEntryPayload

  """Updates a single `Tracker` using its globally unique id and a patch."""
  updateTrackerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackerByNodeIdInput!
  ): UpdateTrackerPayload

  """Updates a single `Tracker` using a unique key and a patch."""
  updateTracker(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackerInput!
  ): UpdateTrackerPayload

  """Updates a single `Unit` using its globally unique id and a patch."""
  updateUnitByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitByNodeIdInput!
  ): UpdateUnitPayload

  """Updates a single `Unit` using a unique key and a patch."""
  updateUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitInput!
  ): UpdateUnitPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByNodeIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Entry` using its globally unique id."""
  deleteEntryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEntryByNodeIdInput!
  ): DeleteEntryPayload

  """Deletes a single `Entry` using a unique key."""
  deleteEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEntryInput!
  ): DeleteEntryPayload

  """Deletes a single `Tracker` using its globally unique id."""
  deleteTrackerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackerByNodeIdInput!
  ): DeleteTrackerPayload

  """Deletes a single `Tracker` using a unique key."""
  deleteTracker(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackerInput!
  ): DeleteTrackerPayload

  """Deletes a single `Unit` using its globally unique id."""
  deleteUnitByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitByNodeIdInput!
  ): DeleteUnitPayload

  """Deletes a single `Unit` using a unique key."""
  deleteUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitInput!
  ): DeleteUnitPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Category`."""
  categories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CategoryFilter
  ): CategoriesConnection

  """Reads and enables pagination through a set of `Entry`."""
  entries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Entry`."""
    orderBy: [EntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EntryFilter
  ): EntriesConnection

  """Reads and enables pagination through a set of `Tracker`."""
  trackers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tracker`."""
    orderBy: [TrackersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TrackerFilter
  ): TrackersConnection

  """Reads and enables pagination through a set of `Unit`."""
  units(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter
  ): UnitsConnection
  category(id: Int!): Category
  entry(id: Int!): Entry
  tracker(id: Int!): Tracker
  unit(id: Int!): Unit

  """Reads a single `Category` using its globally unique `ID`."""
  categoryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category

  """Reads a single `Entry` using its globally unique `ID`."""
  entryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Entry`."""
    nodeId: ID!
  ): Entry

  """Reads a single `Tracker` using its globally unique `ID`."""
  trackerByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tracker`."""
    nodeId: ID!
  ): Tracker

  """Reads a single `Unit` using its globally unique `ID`."""
  unitByNodeId(
    """The globally unique `ID` to be used in selecting a single `Unit`."""
    nodeId: ID!
  ): Unit
}

type Tracker implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  name: String!
  id: Int!
  categoryId: Int!
  unitId: Int!

  """Reads a single `Category` that is related to this `Tracker`."""
  category: Category

  """Reads a single `Unit` that is related to this `Tracker`."""
  unit: Unit

  """Reads and enables pagination through a set of `Entry`."""
  entries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Entry`."""
    orderBy: [EntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EntryFilter
  ): EntriesConnection!
}

"""
A condition to be used against `Tracker` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TrackerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int

  """Checks for equality with the object’s `unitId` field."""
  unitId: Int
}

"""
A filter to be used against `Tracker` object types. All fields are combined with a logical ‘and.’
"""
input TrackerFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `categoryId` field."""
  categoryId: IntFilter

  """Filter by the object’s `unitId` field."""
  unitId: IntFilter

  """Checks for all expressions in this list."""
  and: [TrackerFilter!]

  """Checks for any expressions in this list."""
  or: [TrackerFilter!]

  """Negates the expression."""
  not: TrackerFilter
}

"""An input for mutations affecting `Tracker`"""
input TrackerInput {
  name: String!
  id: Int
  categoryId: Int!
  unitId: Int!
}

"""
Represents an update to a `Tracker`. Fields that are set will be updated.
"""
input TrackerPatch {
  name: String
  id: Int
  categoryId: Int
  unitId: Int
}

"""A connection to a list of `Tracker` values."""
type TrackersConnection {
  """A list of `Tracker` objects."""
  nodes: [Tracker!]!

  """
  A list of edges which contains the `Tracker` and cursor to aid in pagination.
  """
  edges: [TrackersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tracker` you could get from the connection."""
  totalCount: Int!
}

"""A `Tracker` edge in the connection."""
type TrackersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tracker` at the end of the edge."""
  node: Tracker!
}

"""Methods to use when ordering `Tracker`."""
enum TrackersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Unit implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  name: String!
  abbreviation: String!
  id: Int!
  baseUnit: Int!
  multiplier: Int!

  """Reads a single `Unit` that is related to this `Unit`."""
  unitByBaseUnit: Unit

  """Reads and enables pagination through a set of `Unit`."""
  unitsByBaseUnit(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter
  ): UnitsConnection!

  """Reads and enables pagination through a set of `Tracker`."""
  trackers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tracker`."""
    orderBy: [TrackersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TrackerFilter
  ): TrackersConnection!
}

"""
A condition to be used against `Unit` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UnitCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `baseUnit` field."""
  baseUnit: Int
}

"""
A filter to be used against `Unit` object types. All fields are combined with a logical ‘and.’
"""
input UnitFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `baseUnit` field."""
  baseUnit: IntFilter

  """Checks for all expressions in this list."""
  and: [UnitFilter!]

  """Checks for any expressions in this list."""
  or: [UnitFilter!]

  """Negates the expression."""
  not: UnitFilter
}

"""An input for mutations affecting `Unit`"""
input UnitInput {
  name: String!
  abbreviation: String!
  id: Int
  baseUnit: Int!
  multiplier: Int
}

"""Represents an update to a `Unit`. Fields that are set will be updated."""
input UnitPatch {
  name: String
  abbreviation: String
  id: Int
  baseUnit: Int
  multiplier: Int
}

"""A connection to a list of `Unit` values."""
type UnitsConnection {
  """A list of `Unit` objects."""
  nodes: [Unit!]!

  """
  A list of edges which contains the `Unit` and cursor to aid in pagination.
  """
  edges: [UnitsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection."""
type UnitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Unit` at the end of the edge."""
  node: Unit!
}

"""Methods to use when ordering `Unit`."""
enum UnitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BASE_UNIT_ASC
  BASE_UNIT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateCategoryByNodeId` mutation."""
input UpdateCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  patch: CategoryPatch!
  id: Int!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was updated by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `updateEntryByNodeId` mutation."""
input UpdateEntryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Entry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Entry` being updated.
  """
  patch: EntryPatch!
}

"""All input for the `updateEntry` mutation."""
input UpdateEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Entry` being updated.
  """
  patch: EntryPatch!
  id: Int!
}

"""The output of our update `Entry` mutation."""
type UpdateEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Entry` that was updated by this mutation."""
  entry: Entry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tracker` that is related to this `Entry`."""
  tracker: Tracker

  """An edge for our `Entry`. May be used by Relay 1."""
  entryEdge(
    """The method to use when ordering `Entry`."""
    orderBy: [EntriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EntriesEdge
}

"""All input for the `updateTrackerByNodeId` mutation."""
input UpdateTrackerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tracker` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tracker` being updated.
  """
  patch: TrackerPatch!
}

"""All input for the `updateTracker` mutation."""
input UpdateTrackerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tracker` being updated.
  """
  patch: TrackerPatch!
  id: Int!
}

"""The output of our update `Tracker` mutation."""
type UpdateTrackerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tracker` that was updated by this mutation."""
  tracker: Tracker

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Tracker`."""
  category: Category

  """Reads a single `Unit` that is related to this `Tracker`."""
  unit: Unit

  """An edge for our `Tracker`. May be used by Relay 1."""
  trackerEdge(
    """The method to use when ordering `Tracker`."""
    orderBy: [TrackersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TrackersEdge
}

"""All input for the `updateUnitByNodeId` mutation."""
input UpdateUnitByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  patch: UnitPatch!
}

"""All input for the `updateUnit` mutation."""
input UpdateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  patch: UnitPatch!
  id: Int!
}

"""The output of our update `Unit` mutation."""
type UpdateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was updated by this mutation."""
  unit: Unit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Unit`."""
  unitByBaseUnit: Unit

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}
